/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package InterfazGrafica;

import InterfazGrafica.Busqueda.BuscarEquipamiento;
import LogicaDeNegocio.Bascula;
import LogicaDeNegocio.CamaraEstacionamiento;
import LogicaDeNegocio.Equipamiento;
import LogicaDeNegocio.ExcepcionCargaParametros;
import LogicaDeNegocio.Organizacion;
import Persistencia.ExcepcionPersistencia;
import java.awt.Component;
import java.awt.Toolkit;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author usuario
 */
public class ABMEquipamiento extends JFrame implements TransferenciaInstancias{
    
    /**
     * Creates new form CargaEquipamientos
     */
    private Organizacion organizacion;
    private JFrame ventanaAnterior;
    private Equipamiento unEquipamientoSeleccionado;
    private String trayectoriaActual;
    private String operacionActual;
    public void setUnEquipamientoSeleccionado(Equipamiento unEquipamientoSeleccionado) {
        this.unEquipamientoSeleccionado = unEquipamientoSeleccionado;
    }
    public ABMEquipamiento() {
        initComponents();
    }



    public ABMEquipamiento(Organizacion organizacion, JFrame ventanaAnterior, String trayectoriaAnterior) {
        this.setUndecorated(true);
        initComponents();
        this.setSize(Toolkit.getDefaultToolkit().getScreenSize());
        
        this.organizacion = organizacion;
        this.getContentPane().setBackground(ParametrosDeInterfaz.colorFondo);
        setIconImage(new ImageIcon(getClass().getResource(ParametrosDeInterfaz.rutaIcono)).getImage());
        this.trayectoriaActual = trayectoriaAnterior + " - Gestionar Equipamientos";
        cabeceraDeVentana.configurarCabecera(ventanaAnterior, this, "Gestion de Equipamientos", trayectoriaAnterior + " - Gestionar Equipamientos", organizacion.getUsuarioActivo().getApellido()+", "+organizacion.getUsuarioActivo().getNombre());
        

        
        
        
        cargaBasculas();
        this.setVisible(true); 
        jBBuscar.setVisible(false);
        
        this.ventanaAnterior = ventanaAnterior;
        ParametrosDeInterfaz.configurarVentana(this);
    }

    
    
    
    
    private void organizarElementos(){
        this.cargaBasculas();
        this.deshabilitarTodo();
        switch((String)jCBOperacion.getSelectedItem()){
            case "Alta":
                prepararAlta();
                habilitarParametrosAdicionalesSegunEquipamiento();
                break;
            case "Baja":
                prepararBaja();
                visibilizarParametrosAdicionalesSegunEquipamiento();
                break;
            case "Modificacion":
                prepararModificacion();
                visibilizarParametrosAdicionalesSegunEquipamiento();
                break;
            default:
                limpiarCampos();
                break;
                
        }
        //this.pack();
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLNombre = new javax.swing.JLabel();
        jTFNombre = new javax.swing.JTextField();
        jLOperacion = new javax.swing.JLabel();
        jLTipoEquipamiento = new javax.swing.JLabel();
        jCBUnidadMedida = new javax.swing.JComboBox<>();
        jLFechaAdq = new javax.swing.JLabel();
        jLFechaUltim = new javax.swing.JLabel();
        jCFechaAdquisicion = new com.toedter.calendar.JDateChooser();
        jLCapacidadMax = new javax.swing.JLabel();
        jTFCapacidadMax = new javax.swing.JTextField();
        jLUnidadMedida = new javax.swing.JLabel();
        jCBTipoEquipamiento = new javax.swing.JComboBox<>();
        jLBascula = new javax.swing.JLabel();
        jCBBascula = new javax.swing.JComboBox<>();
        jBConcretarAccion = new javax.swing.JButton();
        jBCancelar = new javax.swing.JButton();
        jCFechaUltimoMantenimiento = new com.toedter.calendar.JDateChooser();
        jLDireccion = new javax.swing.JLabel();
        jTFDireccion = new javax.swing.JTextField();
        jLDuracionMax = new javax.swing.JLabel();
        jTFDuracionMax = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jCBOperacion = new javax.swing.JComboBox<>();
        jBBuscar = new javax.swing.JButton();
        jLDias = new javax.swing.JLabel();
        jLEstado = new javax.swing.JLabel();
        jCBEstado = new javax.swing.JComboBox<>();
        cabeceraDeVentana = new InterfazGrafica.CabeceraDeVentana();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 255, 153));

        jLNombre.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLNombre.setText("Nombre");
        jLNombre.setEnabled(false);

        jTFNombre.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jTFNombre.setText("Ingrese un Nombre");
        jTFNombre.setEnabled(false);

        jLOperacion.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLOperacion.setText("Carga de Equipamiento");
        jLOperacion.setEnabled(false);

        jLTipoEquipamiento.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLTipoEquipamiento.setText("Tipo de Equipamiento");
        jLTipoEquipamiento.setEnabled(false);

        jCBUnidadMedida.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jCBUnidadMedida.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Kilogramo", "Tonelada" }));
        jCBUnidadMedida.setEnabled(false);

        jLFechaAdq.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLFechaAdq.setText("Fecha de Adquisicion");
        jLFechaAdq.setEnabled(false);

        jLFechaUltim.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLFechaUltim.setText("Fecha de Ultimo mantenimiento");
        jLFechaUltim.setEnabled(false);

        jCFechaAdquisicion.setEnabled(false);
        jCFechaAdquisicion.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jLCapacidadMax.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLCapacidadMax.setText("Capacidad Maxima:");
        jLCapacidadMax.setEnabled(false);

        jTFCapacidadMax.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jTFCapacidadMax.setText("Ingrese una capacidad");
        jTFCapacidadMax.setEnabled(false);

        jLUnidadMedida.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLUnidadMedida.setText("Unidad de Medida");
        jLUnidadMedida.setEnabled(false);

        jCBTipoEquipamiento.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jCBTipoEquipamiento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Molino", "Camara Est. Acel.", "Deposito", "Bascula", "Laboratorio" }));
        jCBTipoEquipamiento.setEnabled(false);
        jCBTipoEquipamiento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBTipoEquipamientoItemStateChanged(evt);
            }
        });

        jLBascula.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLBascula.setText("Bascula Asociada:");
        jLBascula.setEnabled(false);

        jCBBascula.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jCBBascula.setEnabled(false);

        jBConcretarAccion.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jBConcretarAccion.setText("Aceptar");
        jBConcretarAccion.setEnabled(false);
        jBConcretarAccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBConcretarAccionActionPerformed(evt);
            }
        });

        jBCancelar.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jBCancelar.setText("Cancelar");
        jBCancelar.setEnabled(false);
        jBCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCancelarActionPerformed(evt);
            }
        });

        jCFechaUltimoMantenimiento.setEnabled(false);
        jCFechaUltimoMantenimiento.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jLDireccion.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLDireccion.setText("Direccion");
        jLDireccion.setEnabled(false);

        jTFDireccion.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jTFDireccion.setText("Ingrese una direccion");
        jTFDireccion.setEnabled(false);

        jLDuracionMax.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLDuracionMax.setText("Duraci√≥n maxima de estacionamiento:");
        jLDuracionMax.setEnabled(false);

        jTFDuracionMax.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jTFDuracionMax.setEnabled(false);

        jLabel12.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel12.setText("Seleccione una operacion");

        jCBOperacion.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jCBOperacion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "Alta", "Baja", "Modificacion" }));
        jCBOperacion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBOperacionItemStateChanged(evt);
            }
        });

        jBBuscar.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jBBuscar.setText("Buscar un Equipamiento");
        jBBuscar.setEnabled(false);
        jBBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBuscarActionPerformed(evt);
            }
        });

        jLDias.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLDias.setText("d√≠as");
        jLDias.setEnabled(false);

        jLEstado.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLEstado.setText("Estado");
        jLEstado.setEnabled(false);

        jCBEstado.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jCBEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Activo", "Baja" }));
        jCBEstado.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cabeceraDeVentana, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLTipoEquipamiento)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCBTipoEquipamiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLBascula)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCBBascula, 0, 506, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLOperacion)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLNombre)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTFNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(74, 74, 74)
                                        .addComponent(jLEstado)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jCBEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLDireccion)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTFDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel12)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jCBOperacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jBBuscar))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLDuracionMax)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jTFDuracionMax, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLDias))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLFechaUltim)
                                            .addComponent(jLFechaAdq))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jCFechaAdquisicion, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jCFechaUltimoMantenimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBConcretarAccion)
                        .addGap(18, 18, 18)
                        .addComponent(jBCancelar))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLUnidadMedida)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCBUnidadMedida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLCapacidadMax)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTFCapacidadMax, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cabeceraDeVentana, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jCBOperacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBBuscar))
                .addGap(18, 18, 18)
                .addComponent(jLOperacion)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLTipoEquipamiento)
                    .addComponent(jCBTipoEquipamiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLBascula)
                    .addComponent(jCBBascula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLNombre)
                    .addComponent(jTFNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLEstado)
                    .addComponent(jCBEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLDireccion)
                    .addComponent(jTFDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLFechaAdq)
                            .addComponent(jCFechaAdquisicion, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLFechaUltim))
                    .addComponent(jCFechaUltimoMantenimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLCapacidadMax)
                        .addComponent(jTFCapacidadMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLUnidadMedida)
                        .addComponent(jCBUnidadMedida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jBCancelar)
                        .addComponent(jBConcretarAccion))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLDuracionMax)
                        .addComponent(jTFDuracionMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLDias)))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void cargaBasculas(){
        this.jCBBascula.removeAllItems();
        this.jCBBascula.addItem("Seleccionar");
        ArrayList basculasActivas = organizacion.getBasculasActivas();
        Iterator recorredorDeBasculas = basculasActivas.iterator();
        while (recorredorDeBasculas.hasNext()){
            Bascula unaBascula = (Bascula) recorredorDeBasculas.next();
            this.jCBBascula.addItem(unaBascula.toString());
        }
        
    }
    private void jBConcretarAccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBConcretarAccionActionPerformed
        try {
            Bascula unaBasculaAsociada = null;
            switch ((String)jCBOperacion.getSelectedItem()){
                case "Alta":
                    switch ((String)jCBTipoEquipamiento.getSelectedItem()){
                        case "Molino":
                            unaBasculaAsociada = this.organizacion.getUnaBascula((String) jCBBascula.getSelectedItem());
                            this.organizacion.registrarEquipamiento((String) jCBTipoEquipamiento.getSelectedItem(), jTFNombre.getText(), jTFDireccion.getText(), jCFechaAdquisicion.getCalendar(), jCFechaUltimoMantenimiento.getCalendar(), jTFCapacidadMax.getText(),(String) jCBUnidadMedida.getSelectedItem(), unaBasculaAsociada, "0");
                            break;
                        case "Deposito":
                            unaBasculaAsociada = this.organizacion.getUnaBascula((String) jCBBascula.getSelectedItem());
                            this.organizacion.registrarEquipamiento((String) jCBTipoEquipamiento.getSelectedItem(), jTFNombre.getText(), jTFDireccion.getText(), jCFechaAdquisicion.getCalendar(), jCFechaUltimoMantenimiento.getCalendar(), jTFCapacidadMax.getText(),(String) jCBUnidadMedida.getSelectedItem(), unaBasculaAsociada, "0");
                            break;
                        case "Bascula":
                            this.organizacion.registrarEquipamiento((String) jCBTipoEquipamiento.getSelectedItem(), jTFNombre.getText(), jTFDireccion.getText(), jCFechaAdquisicion.getCalendar(), jCFechaUltimoMantenimiento.getCalendar(), jTFCapacidadMax.getText(),(String) jCBUnidadMedida.getSelectedItem(), unaBasculaAsociada, "0");
                            cargaBasculas();//Actualizar lista de basculas disponibles
                            break;
                        case "Camara Est. Acel.":
                            unaBasculaAsociada = this.organizacion.getUnaBascula((String) jCBBascula.getSelectedItem());
                            this.organizacion.registrarEquipamiento("Camara de estacionamiento acelerado", jTFNombre.getText(), jTFDireccion.getText(), jCFechaAdquisicion.getCalendar(), jCFechaUltimoMantenimiento.getCalendar(), jTFCapacidadMax.getText(),(String) jCBUnidadMedida.getSelectedItem(), unaBasculaAsociada, (String)jTFDuracionMax.getText());
                            break;
                        case "Laboratorio":
                            unaBasculaAsociada = this.organizacion.getUnaBascula((String) jCBBascula.getSelectedItem());
                            this.organizacion.registrarEquipamiento("Laboratorio", jTFNombre.getText(), jTFDireccion.getText(), jCFechaAdquisicion.getCalendar(), jCFechaUltimoMantenimiento.getCalendar(), jTFCapacidadMax.getText(),(String) jCBUnidadMedida.getSelectedItem(), unaBasculaAsociada, (String)jTFDuracionMax.getText());
                            break;
                    }
                    break;
                case "Baja":
                    this.organizacion.darDeBajaUnEquipamiento(unEquipamientoSeleccionado);
                    break;
                case "Modificacion":
                    unaBasculaAsociada = this.organizacion.getUnaBascula((String) jCBBascula.getSelectedItem());
                    if (unEquipamientoSeleccionado!= null && unEquipamientoSeleccionado instanceof CamaraEstacionamiento){
                        try {
                                this.organizacion.modificarUnEquipamiento(unEquipamientoSeleccionado, jTFNombre.getText(), jTFDireccion.getText(), jCFechaAdquisicion.getCalendar(), jCFechaUltimoMantenimiento.getCalendar(), Float.parseFloat(jTFCapacidadMax.getText()),(String) jCBUnidadMedida.getSelectedItem(), unaBasculaAsociada, Float.parseFloat(jTFDuracionMax.getText()), (String)jCBEstado.getSelectedItem());
                            } catch (NumberFormatException e){
                                JOptionPane.showMessageDialog(null, "Por favor, ingrese una capacidad Maxima y una duraci√≥n m√°xima de estacionamiento en formato valido (Solo numeros y un punto)");
                                return;
                            }
                    }else{
                        this.organizacion.modificarUnEquipamiento(unEquipamientoSeleccionado, jTFNombre.getText(), jTFDireccion.getText(), jCFechaAdquisicion.getCalendar(), jCFechaUltimoMantenimiento.getCalendar(), Float.parseFloat(jTFCapacidadMax.getText()),(String) jCBUnidadMedida.getSelectedItem(), unaBasculaAsociada, 0, (String)jCBEstado.getSelectedItem());    
                    }
                    
                    break;
            }
            JOptionPane.showMessageDialog(null, "Operacion realizada con exito.");
            limpiarCampos();
        } catch (ExcepcionCargaParametros ex) {
            JOptionPane.showMessageDialog(null, "Error: "+ex.getMessage());
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error en la Base de datos: "+ex.getMessage());
        } catch (ExcepcionPersistencia ex) {
            JOptionPane.showMessageDialog(null, "Ocurrio un error en la Persistencia: "+ex.getMessage());
        }
    }//GEN-LAST:event_jBConcretarAccionActionPerformed

    private void jBCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCancelarActionPerformed
        this.limpiarCampos();
    }//GEN-LAST:event_jBCancelarActionPerformed

    private void jCBTipoEquipamientoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBTipoEquipamientoItemStateChanged
        deshabilitarTodo();
        organizarElementos();
        habilitarParametrosAdicionalesSegunEquipamiento();
    }//GEN-LAST:event_jCBTipoEquipamientoItemStateChanged

    private void jCBOperacionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBOperacionItemStateChanged
        if (!jCBOperacion.getSelectedItem().equals("Seleccionar")){
            this.organizarElementos();
            
        }
        
    }//GEN-LAST:event_jCBOperacionItemStateChanged

    private void jBBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBuscarActionPerformed
        BuscarEquipamiento unaVentana = new BuscarEquipamiento(this.organizacion, this, this.trayectoriaActual);
        this.dispose();
    }//GEN-LAST:event_jBBuscarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ABMEquipamiento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ABMEquipamiento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ABMEquipamiento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ABMEquipamiento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ABMEquipamiento().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private InterfazGrafica.CabeceraDeVentana cabeceraDeVentana;
    private javax.swing.JButton jBBuscar;
    private javax.swing.JButton jBCancelar;
    private javax.swing.JButton jBConcretarAccion;
    private javax.swing.JComboBox<String> jCBBascula;
    private javax.swing.JComboBox<String> jCBEstado;
    private javax.swing.JComboBox<String> jCBOperacion;
    private javax.swing.JComboBox<String> jCBTipoEquipamiento;
    private javax.swing.JComboBox<String> jCBUnidadMedida;
    private com.toedter.calendar.JDateChooser jCFechaAdquisicion;
    private com.toedter.calendar.JDateChooser jCFechaUltimoMantenimiento;
    private javax.swing.JLabel jLBascula;
    private javax.swing.JLabel jLCapacidadMax;
    private javax.swing.JLabel jLDias;
    private javax.swing.JLabel jLDireccion;
    private javax.swing.JLabel jLDuracionMax;
    private javax.swing.JLabel jLEstado;
    private javax.swing.JLabel jLFechaAdq;
    private javax.swing.JLabel jLFechaUltim;
    private javax.swing.JLabel jLNombre;
    private javax.swing.JLabel jLOperacion;
    private javax.swing.JLabel jLTipoEquipamiento;
    private javax.swing.JLabel jLUnidadMedida;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JTextField jTFCapacidadMax;
    private javax.swing.JTextField jTFDireccion;
    private javax.swing.JTextField jTFDuracionMax;
    private javax.swing.JTextField jTFNombre;
    // End of variables declaration//GEN-END:variables

    private void deshabilitarTodo(){
        
        jLUnidadMedida.setVisible(false);
        jCBUnidadMedida.setVisible(false);
        jLCapacidadMax.setVisible(false);
        jTFCapacidadMax.setVisible(false);
                
        jLOperacion.setEnabled(false);
        jLTipoEquipamiento.setEnabled(false);
        jLNombre.setEnabled(false);
        jLDireccion.setEnabled(false);
        jLBascula.setEnabled(false);
        
        jLEstado.setEnabled(false);
        jLFechaAdq.setEnabled(false);
        jLFechaUltim.setEnabled(false);
        jLCapacidadMax.setEnabled(false);
        jLUnidadMedida.setEnabled(false);
        jLDuracionMax.setEnabled(false);
        jLDias.setEnabled(false);
        
        jLBascula.setVisible(false);
        jLEstado.setVisible(false);
        
        jLDuracionMax.setVisible(false);
        jTFDuracionMax.setVisible(false);
        jLDias.setVisible(false);
        jBBuscar.setVisible(false);
        jCBBascula.setVisible(false);
        jCBEstado.setVisible(false);
        
        jCBOperacion.setEnabled(false);
        jCBTipoEquipamiento.setEnabled(false);
        jCBBascula.setEnabled(false);
        jTFNombre.setEnabled(false);
        jCBEstado.setEnabled(false);
        jTFDireccion.setEnabled(false);
        jCFechaAdquisicion.setEnabled(false);
        jCFechaUltimoMantenimiento.setEnabled(false);
        jTFCapacidadMax.setEnabled(false);
        jCBUnidadMedida.setEnabled(false);
        jTFDuracionMax.setEnabled(false);
        
        jBConcretarAccion.setEnabled(false);
        jBCancelar.setEnabled(false);
        
    }
    
    private void limpiarCampos() {
                this.operacionActual = "";
                jLOperacion.setText("Operacion:");
                
                jTFNombre.setText("");
                jTFDireccion.setText("");
                jCBBascula.setSelectedItem("Seleccionar");  //ojo con esto.
                jTFCapacidadMax.setText("");
                
                jLOperacion.setEnabled(false);
                jBBuscar.setVisible(false);
                jLTipoEquipamiento.setEnabled(false);
                jCBTipoEquipamiento.setEnabled(false);
                jLBascula.setEnabled(false);
                jCBBascula.setEnabled(false);
                jLNombre.setEnabled(false);
                jTFNombre.setEnabled(false);
                jLDireccion.setEnabled(false);
                jTFDireccion.setEnabled(false);
                jLFechaAdq.setEnabled(false);
                jCFechaAdquisicion.setEnabled(false);
                jLFechaUltim.setEnabled(false);
                jCFechaUltimoMantenimiento.setEnabled(false);
                jLCapacidadMax.setEnabled(false);
                jTFCapacidadMax.setEnabled(false);
                jLUnidadMedida.setEnabled(false);
                jCBUnidadMedida.setEnabled(false);
                jLDuracionMax.setEnabled(false);
                jTFDuracionMax.setEnabled(false);
                jBConcretarAccion.setEnabled(false);
                jBCancelar.setEnabled(false);
                jLDias.setEnabled(false);
                jCBOperacion.setSelectedItem("Seleccionar");
                jLEstado.setEnabled(false);
                jCBEstado.setEnabled(false);
                this.jCBOperacion.setEnabled(true);
                this.unEquipamientoSeleccionado = null;
    }

    @Override
    public void actualizarUnObjeto(Object UnObjeto) {
        Equipamiento unEquipamiento = (Equipamiento) UnObjeto;
        this.unEquipamientoSeleccionado = unEquipamiento;
        if (unEquipamiento.getBasculaAsociada() != null){
            jCBBascula.setSelectedItem(unEquipamiento.getBasculaAsociada().getNombre());
        }
            
        jCBTipoEquipamiento.setSelectedItem(unEquipamiento.getTipo());
        jTFNombre.setText(unEquipamiento.getNombre());
        jTFDireccion.setText(unEquipamiento.getDireccion());
        jCFechaAdquisicion.setCalendar(unEquipamiento.getFechaAdquisicionC());
        jCFechaUltimoMantenimiento.setCalendar(unEquipamiento.getFechaUltimoMantenimientoC());
        jTFCapacidadMax.setText(""+unEquipamiento.getCapacidadMaxima());
        jCBUnidadMedida.setSelectedItem(unEquipamiento.getUnidadDeMedida());
        jCBEstado.setSelectedItem(unEquipamiento.getEstado());
        if (unEquipamiento instanceof CamaraEstacionamiento){
            CamaraEstacionamiento unaCamara = (CamaraEstacionamiento) unEquipamiento;
            jTFDuracionMax.setText(""+unaCamara.getDuracionMaximaEstacionamiento());
        }
        organizarElementos();
        jBConcretarAccion.setEnabled(true);
        jBCancelar.setEnabled(true);
        //this.pack();
    }

    private void prepararAlta() {
        this.operacionActual = "Alta";
        jLTipoEquipamiento.setEnabled(true);
        jLNombre.setEnabled(true);
        jLDireccion.setEnabled(true);
        jLEstado.setEnabled(true);
        jLFechaAdq.setEnabled(true);
        jLFechaUltim.setEnabled(true);
        jLCapacidadMax.setEnabled(true);
        jLUnidadMedida.setEnabled(true);
        
        jCBTipoEquipamiento.setEnabled(true);
        jTFNombre.setEnabled(true);
        jCBEstado.setEnabled(true);
        jTFDireccion.setEnabled(true);
        jCFechaAdquisicion.setEnabled(true);
        jCFechaUltimoMantenimiento.setEnabled(true);
        jTFCapacidadMax.setEnabled(true);
        jCBUnidadMedida.setEnabled(true);
        jTFDuracionMax.setEnabled(true);
        
        jBConcretarAccion.setEnabled(true);
        jBCancelar.setEnabled(true);
        
        
        jBConcretarAccion.setText("Dar de Alta un equipamiento");
        jLOperacion.setText("Alta de un equipamiento.");
        jLOperacion.setEnabled(true);
        switch ((String)jCBTipoEquipamiento.getSelectedItem()){
            case "Molino":
                jCBBascula.setEnabled(true);
                jLBascula.setEnabled(true);
                break;
            case "Deposito":
                jCBBascula.setEnabled(true);
                jLBascula.setEnabled(true);
                break;
            case "Bascula":
                jCBBascula.setEnabled(false);
                jLBascula.setEnabled(false);
                break;
            case "Camara Est. Acel.":
                jCBBascula.setEnabled(true);
                jLBascula.setEnabled(true);
                jLDuracionMax.setVisible(true);
                jTFDuracionMax.setVisible(true);
                jLDias.setVisible(true);
                jLDuracionMax.setEnabled(true);
                jTFDuracionMax.setEnabled(true);
                jLDias.setEnabled(true);
                break;
        }
    }
    private void habilitarParametrosAdicionalesSegunEquipamiento(){
        switch ((String)jCBTipoEquipamiento.getSelectedItem()){
            case "Molino":
                jLUnidadMedida.setVisible(true);
                jCBUnidadMedida.setVisible(true);
                jLCapacidadMax.setVisible(true);
                jTFCapacidadMax.setVisible(true);
                
                jCBBascula.setVisible(true);
                jLBascula.setVisible(true);
                jCBBascula.setEnabled(true);
                jLBascula.setEnabled(true);
                break;
            case "Deposito":
                jLUnidadMedida.setVisible(true);
                jCBUnidadMedida.setVisible(true);
                jLCapacidadMax.setVisible(true);
                jTFCapacidadMax.setVisible(true);
                
                jCBBascula.setVisible(true);
                jLBascula.setVisible(true);
                jCBBascula.setEnabled(true);
                jLBascula.setEnabled(true);
                break;
            case "Bascula":
                jLUnidadMedida.setVisible(true);
                jCBUnidadMedida.setVisible(true);
                jLCapacidadMax.setVisible(true);
                jTFCapacidadMax.setVisible(true);

                jCBBascula.setEnabled(false);
                jLBascula.setEnabled(false);
                break;
            case "Camara Est. Acel.":
                jLUnidadMedida.setVisible(true);
                jCBUnidadMedida.setVisible(true);
                jLCapacidadMax.setVisible(true);
                jTFCapacidadMax.setVisible(true);
                
                jCBBascula.setVisible(true);
                jLBascula.setVisible(true);
                jCBBascula.setEnabled(true);
                jLBascula.setEnabled(true);
                jLDuracionMax.setVisible(true);
                jLDuracionMax.setEnabled(true);
                jTFDuracionMax.setVisible(true);
                jTFDuracionMax.setEnabled(true);
                jLDias.setVisible(true);
                jLDias.setEnabled(true);
                break;
            case "Laboratorio":
                
                break;
        }
    }
    private void visibilizarParametrosAdicionalesSegunEquipamiento(){
                switch ((String)jCBTipoEquipamiento.getSelectedItem()){
                    case "Molino":
                        jCBBascula.setVisible(true);
                        jLBascula.setVisible(true);
                        break;
                    case "Deposito":
                        jCBBascula.setVisible(true);
                        jLBascula.setVisible(true);
                        break;
                    case "Bascula":
                        
                        jCBBascula.setVisible(false);
                        jLBascula.setVisible(false);
                        break;
                    case "Camara Est. Acel.":
                        jCBBascula.setVisible(true);
                        jLBascula.setVisible(true);
                        jLDuracionMax.setVisible(true);
                        jTFDuracionMax.setVisible(true);
                        jLDias.setVisible(true);
                        break;
                }        
    }
    
    private void prepararBaja() {
        this.operacionActual = "Baja";
        jLOperacion.setEnabled(true);
        jLTipoEquipamiento.setEnabled(true);
        jLNombre.setEnabled(true);
        jLDireccion.setEnabled(true);
        jLBascula.setEnabled(true);
        jLEstado.setEnabled(true);
        jLFechaAdq.setEnabled(true);
        jLFechaUltim.setEnabled(true);
        jLCapacidadMax.setEnabled(true);
        jLUnidadMedida.setEnabled(true);
        jLDuracionMax.setEnabled(true);
        jLDias.setEnabled(true);
        
        jLEstado.setVisible(true);
        jCBEstado.setVisible(true);
        
        
        jBBuscar.setVisible(true);
        jBBuscar.setEnabled(true);
        jBCancelar.setEnabled(true);
        
        jLOperacion.setText("Baja de un equipamiento.");
        if (this.unEquipamientoSeleccionado == null)
            return;
        jBConcretarAccion.setText("Dar de Baja un equipamiento");
    }

    private void prepararModificacion() {
        this.operacionActual = "Modificacion";
        jBBuscar.setVisible(true);
        jBBuscar.setEnabled(true);
        jBCancelar.setEnabled(true);        
        jBConcretarAccion.setText("Guardar cambios");
        if (this.unEquipamientoSeleccionado == null)
            return;
        jLOperacion.setEnabled(true);
        jLTipoEquipamiento.setEnabled(true);
        jLNombre.setEnabled(true);
        jLDireccion.setEnabled(true);
        jLEstado.setEnabled(true);
        jLFechaAdq.setEnabled(true);
        jLFechaUltim.setEnabled(true);
        jLCapacidadMax.setEnabled(true);
        jLUnidadMedida.setEnabled(true);
        
        jLEstado.setVisible(true);
        jCBEstado.setVisible(true);

        jTFNombre.setEnabled(true);
        jCBEstado.setEnabled(true);
        jTFDireccion.setEnabled(true);
        jCFechaAdquisicion.setEnabled(true);
        jCFechaUltimoMantenimiento.setEnabled(true);
        jTFCapacidadMax.setEnabled(true);
        jCBUnidadMedida.setEnabled(true);
        
        jBConcretarAccion.setEnabled(true);
        
        switch ((String)unEquipamientoSeleccionado.getClass().getSimpleName()){
            case "Molino":
                jCBBascula.setEnabled(true);
                jCBBascula.setSelectedItem(unEquipamientoSeleccionado.getBasculaAsociada().getNombre());
                jLBascula.setEnabled(true);
                break;
            case "Deposito":
                jCBBascula.setEnabled(true);
                jCBBascula.setSelectedItem(unEquipamientoSeleccionado.getBasculaAsociada().getNombre());
                jLBascula.setEnabled(true);
                break;
            case "Bascula":
                jCBBascula.setEnabled(false);
                jLBascula.setEnabled(false);
                break;
            case "CamaraEstacionamiento":
                jCBBascula.setEnabled(true);
                jCBBascula.setSelectedItem(unEquipamientoSeleccionado.getBasculaAsociada().getNombre());
                jLBascula.setEnabled(true);
                jLDuracionMax.setVisible(true);
                jTFDuracionMax.setVisible(true);
                jLDias.setVisible(true);
                jLDuracionMax.setEnabled(true);
                jTFDuracionMax.setEnabled(true);
                jLDias.setEnabled(true);
                break;
        }
    }

    public String getOperacionActual() {
        return operacionActual;
    }
    

}
