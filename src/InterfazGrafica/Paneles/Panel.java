/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package InterfazGrafica.Paneles;

import InterfazGrafica.Consultable;
import LogicaDeNegocio.AnalisisLaboratorio;
import LogicaDeNegocio.CriterioAnalisisLaboratorio;
import LogicaDeNegocio.Equipamiento;
import LogicaDeNegocio.ExcepcionCargaParametros;
import LogicaDeNegocio.Lote;
import LogicaDeNegocio.OrdenDeCompra;
import LogicaDeNegocio.OrdenDeProduccion;
import LogicaDeNegocio.Organizacion;
import LogicaDeNegocio.Proveedor;
import LogicaDeNegocio.Salida;
import LogicaDeNegocio.Transformacion;
import Reportes.GeneradorDeReportes;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;

/**
 *
 * @author usuario
 */
public abstract class Panel extends javax.swing.JPanel {

    /**
     * Creates new form PanelGestionEstacionamientos
     */
    public Panel() {
        initComponents();
    }
    
    protected JFrame ventanaContenedora;
    protected Organizacion organizacion;
    protected String trayectoriaActual;
    protected String tituloReporte;
    
    protected String[] criterios;
    protected Map<String, Boolean> criteriosSeleccionados;
    protected Map<String, Object> objetosAsociadosACriterios;
    
    
    public Panel(JFrame ventanaContenedora, String trayectoriaActual, Organizacion unaOrganizacion, String [] criterios, String tituloReporte) {
        
        this.ventanaContenedora = ventanaContenedora;
        this.organizacion = unaOrganizacion;
        this.trayectoriaActual = trayectoriaActual;
        this.tituloReporte = tituloReporte;
        
        criteriosSeleccionados = new HashMap<String, Boolean>();
        objetosAsociadosACriterios = new HashMap<String, Object>();
        
        this.criterios = criterios;
        for (int i=0; i<criterios.length; i++){
            if (criterios[i] != null){
                criteriosSeleccionados.put(criterios[i], false);
            }
            /*try{
                objetosAsociadosACriterios.put(criterios[i], objetos[i]);
            } catch (java.lang.IndexOutOfBoundsException e){
                objetosAsociadosACriterios.put(criterios[i], null);
            }*/
        }
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1146, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 709, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public JFrame getVentanaContenedora() {
        return ventanaContenedora;
    }

    public Organizacion getOrganizacion() {
        return organizacion;
    }

    public String getTrayectoriaActual() {
        return trayectoriaActual;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    protected void asignarCriterio(int i, javax.swing.JCheckBox unCheckBox){
        if (i>criterios.length)
            return;
        this.criteriosSeleccionados.put(criterios[i], unCheckBox.isSelected());
    }
    
    protected void asignarObjetoACriterio(int i, Object unObjeto){
        if (i>criterios.length)
            return;
        this.objetosAsociadosACriterios.put(criterios[i], unObjeto);
    }
    
    protected abstract void generarObjetos();

    
    /*private Map<String, String> getCriterios() {
        Map<String, String> retorno = new HashMap<String, String>();
        String unaClave;
        String unaCadena;
        for (int i=0; i<this.criterios.length; i++){
            unaClave = criterios[i];
            if (unaClave != null && criteriosSeleccionados.get(unaClave) != null && criteriosSeleccionados.get(unaClave)){
                unaCadena = resolverCadena(objetosAsociadosACriterios.get(criterios[i]));
                retorno.put(unaClave, unaCadena);
            }
        }
        
        Iterator recorredorDeClaves = this.criteriosSeleccionados.keySet().iterator();
        
        while (recorredorDeClaves.hasNext()){
            unaClave = (String) recorredorDeClaves.next();
            boolean unCriterio = this.criteriosSeleccionados.get(unaClave);
            if (unCriterio){
                switch (unaClave){
                    case criterio1:
                        retorno.put(unaClave, "ID "+ this.unaOrdenProduccionSeleccionada.getId());
                        break;
                    case criterio2:
                        retorno.put(unaClave, this.unProveedorSeleccionado.getRazonSocial());
                        break;
                    case criterio3:
                        retorno.put(unaClave, (String) datoCriterio3.getSelectedItem());
                        break;
                    case criterio4:
                        String fechaOrigenDesde = Organizacion.expresarCalendario(dato1Criterio4.getCalendar());
                        String fechaOrigenHasta = Organizacion.expresarCalendario(dato2Criterio4.getCalendar());
                        retorno.put(unaClave, "Desde "+fechaOrigenDesde+" hasta "+fechaOrigenHasta);   
                        break;
                    default:
                    break;
                }
            }else{
                retorno.put(unaClave, "indistinto");
            }
        }
        
        
        return retorno;
    }*/
    
    protected Map<String, String> getCriterios() {
        Map<String, String> retorno = new HashMap<String, String>();
        String unaClave;
        String unaCadena;
        for (int i=0; i<this.criterios.length; i++){
            unaClave = criterios[i];
            if (unaClave != null && criteriosSeleccionados.get(unaClave) != null && criteriosSeleccionados.get(unaClave)){
                unaCadena = resolverCadena(objetosAsociadosACriterios.get(criterios[i]));
                retorno.put(unaClave, unaCadena);
            }
        }
        return retorno;
    }

    protected String resolverCadena(Object unObjeto) {
        String retorno = "Indistinto.";
        if (unObjeto == null)
            return retorno;
        if (unObjeto instanceof Boolean){
            if ((Boolean)unObjeto)
                return "Si.";
            else
                return "No.";
        }
        if (unObjeto instanceof CriterioAnalisisLaboratorio)
            return ((CriterioAnalisisLaboratorio)unObjeto).getNombre();
        if (unObjeto instanceof OrdenDeProduccion)
            return ("ID: "+((OrdenDeProduccion)unObjeto).getId());
        if (unObjeto instanceof OrdenDeCompra)
            return ("ID: "+((OrdenDeCompra)unObjeto).getId());
        if (unObjeto instanceof Proveedor)
            return (((Proveedor)unObjeto).getRazonSocial());
        if (unObjeto instanceof AnalisisLaboratorio)
            return ("ID: "+((AnalisisLaboratorio)unObjeto).getId());
        if (unObjeto instanceof Lote)
            return ("Etiqueta: "+((Lote)unObjeto).getEtiqueta());
        if (unObjeto instanceof ArrayList){
            ArrayList unaLista = (ArrayList) unObjeto;
            if (!unaLista.isEmpty() && unaLista.get(0) instanceof Calendar){
                String fechaOrigenDesde = Organizacion.expresarCalendario((Calendar) unaLista.get(0));
                String fechaOrigenHasta = Organizacion.expresarCalendario((Calendar) unaLista.get(1));
                return ("Desde "+fechaOrigenDesde+" hasta "+fechaOrigenHasta);   
            }
        }
        if (unObjeto instanceof Equipamiento)
            return (((Equipamiento)unObjeto).getNombre());
        if (unObjeto instanceof Salida)
            return ("ID :"+((Salida)unObjeto).getId());
        if (unObjeto instanceof Transformacion)
            return ("ID :"+((Transformacion)unObjeto).getId());
        if (unObjeto instanceof String)
            return (String) unObjeto;
            
        
        return retorno;
    }
    
    protected static ArrayList generarListaFecha(Calendar fechaInferior, Calendar fechaSuperior){
        ///Genero una lista de dos elementos: La fecha inferior y la fecha superior
        ArrayList retorno = new ArrayList();
        retorno.add(fechaInferior);
        retorno.add(fechaSuperior);
        return retorno;
    }
    
    protected void cargarTabla(JTable unaTabla, Map objetosAEvaluar){
        try {
            ArrayList listaFiltrada = null;
            generarObjetos();
            listaFiltrada = (this.organizacion.filtrarGenerico(this.criterios, this.criteriosSeleccionados, this.objetosAsociadosACriterios, objetosAEvaluar));
            ((DefaultTableModel)unaTabla.getModel()).setRowCount(0);
            Iterator tuplas = listaFiltrada.iterator();
            while (tuplas.hasNext()){
                Consultable unaTupla = (Consultable) tuplas.next();
                ((DefaultTableModel)unaTabla.getModel()).addRow(unaTupla.devolverVector());
            }
        } catch (ExcepcionCargaParametros ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }
    protected void generarReporte(Map objetosAEvaluar){
        try {
            ArrayList listaFiltrada = null;
            generarObjetos();
            listaFiltrada = (this.organizacion.filtrarGenerico(this.criterios, this.criteriosSeleccionados, this.objetosAsociadosACriterios, objetosAEvaluar));
            Map<String, String> criterios = getCriterios();
            GeneradorDeReportes.generarReporteGenerico(tituloReporte,this.criteriosSeleccionados, criterios, listaFiltrada, organizacion.getUsuarioActivo().getApellido()+", "+organizacion.getUsuarioActivo().getNombre());
            JOptionPane.showMessageDialog(null, "Reporte de "+tituloReporte+" generado exitosamente.");
        } catch (ExcepcionCargaParametros ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }
    protected void generarReporteEstadistica(Map objetosAEvaluar){
        try {
            ArrayList listaFiltrada = null;
            generarObjetos();
            listaFiltrada = (this.organizacion.filtrarGenerico(this.criterios, this.criteriosSeleccionados, this.objetosAsociadosACriterios, objetosAEvaluar));
            Map<String, String> criterios = getCriterios();
            GeneradorDeReportes.generarReporteGenerico(tituloReporte,this.criteriosSeleccionados, criterios, listaFiltrada, organizacion.getUsuarioActivo().getApellido()+", "+organizacion.getUsuarioActivo().getNombre());
            JOptionPane.showMessageDialog(null, "Reporte de "+tituloReporte+" generado exitosamente.");
        } catch (ExcepcionCargaParametros ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }
}
