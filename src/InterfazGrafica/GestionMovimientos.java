/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package InterfazGrafica;

import LogicaDeNegocio.Bascula;
import LogicaDeNegocio.CamaraEstacionamiento;
import LogicaDeNegocio.Equipamiento;
import LogicaDeNegocio.ExcepcionCargaParametros;
import LogicaDeNegocio.Lote;

import LogicaDeNegocio.Organizacion;
import Persistencia.ExcepcionPersistencia;
import java.awt.Color;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author usuario
 */
public class GestionMovimientos extends javax.swing.JFrame implements TransferenciaInstancias {
    
    /**
     * Creates new form CargaEquipamientos
     */
    private Organizacion organizacion;
    private JFrame ventanaAnterior;
    private String trayectoriaActual;
    private String ObjetoABuscar; //Variable utilizada para poder comunicar a la ventana de busqueda cual es la intencion de la busqueda.
    private Equipamiento unEquipamientoOrigenSeleccionado;
    private Lote unLoteSeleccionado;
    private Equipamiento unEquipamientoDestinoSeleccionado;
    

    public GestionMovimientos() {
        initComponents();
    }



    GestionMovimientos(Organizacion organizacion, JFrame ventanaAnterior, String trayectoriaAnterior) {
        initComponents();
        
        this.organizacion = organizacion;
        setIconImage(new ImageIcon(getClass().getResource(ParametrosDeInterfaz.rutaIcono)).getImage());
        this.trayectoriaActual = trayectoriaAnterior + " - Gestion de Movimientos";
        cabeceraDeVentana.configurarCabecera(ventanaAnterior, this, "Gestion de Movimientos", this.trayectoriaActual);
        
        this.getContentPane().setBackground(ParametrosDeInterfaz.colorFondo);
        
        
        
        this.setVisible(true); 
        jBBuscar.setVisible(false);
        
        this.ventanaAnterior = ventanaAnterior;
    }
    private void organizarElementos(){
        this.deshabilitarTodo();
        switch((String)jCBOperacion.getSelectedItem()){
            case "Insertar un movimiento":
                prepararAlta();
                habilitarParametrosAdicionalesSegunEquipamiento();
                break;
            case "Anular un movimiento":
                prepararBaja();
                visibilizarParametrosAdicionalesSegunEquipamiento();
                break;
        }
        this.pack();
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLStaticEquipamientoDestino = new javax.swing.JLabel();
        jLOperacion = new javax.swing.JLabel();
        jLStaticBascula = new javax.swing.JLabel();
        jBConcretarAccion = new javax.swing.JButton();
        jBCancelar = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jCBOperacion = new javax.swing.JComboBox<>();
        jBBuscarDestino = new javax.swing.JButton();
        JLBascula = new javax.swing.JLabel();
        jLStaticEquipamientoOrigen = new javax.swing.JLabel();
        jBBuscarOrigen = new javax.swing.JButton();
        jLStaticEquipamientoOrigenSeleccionado = new javax.swing.JLabel();
        jLEquipamientoOrigen = new javax.swing.JLabel();
        jLStaticEquipamientoDestinoSeleccionado = new javax.swing.JLabel();
        jLEquipamientoDestino = new javax.swing.JLabel();
        jBBuscar = new javax.swing.JButton();
        jLStaticLoteImplicado = new javax.swing.JLabel();
        JLLote = new javax.swing.JLabel();
        jBBuscarLote = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        timePicker1 = new com.github.lgooddatepicker.components.TimePicker();
        timePicker2 = new com.github.lgooddatepicker.components.TimePicker();
        jLStaticPatenteAcoplado = new javax.swing.JLabel();
        jTFPatenteAcoplado = new javax.swing.JTextField();
        jLStaticNombreConductor = new javax.swing.JLabel();
        jLStaticCantidad = new javax.swing.JLabel();
        jTFNombreConductor1 = new javax.swing.JTextField();
        jLStaticHoraEntrada = new javax.swing.JLabel();
        jCBTipoEquipamiento = new javax.swing.JComboBox<>();
        jLStaticPatenteChasis = new javax.swing.JLabel();
        jTFPatenteChasis = new javax.swing.JTextField();
        jLStaticHoraSalida = new javax.swing.JLabel();
        jTFNombreConductor = new javax.swing.JTextField();
        jLStaticTipoUnidadTransporte = new javax.swing.JLabel();
        jLStaticFechaOrigen = new javax.swing.JLabel();
        jCFechaOrigenMov = new com.toedter.calendar.JDateChooser();
        jLStaticDetallesTicket = new javax.swing.JLabel();
        jLStaticPesoEntrada = new javax.swing.JLabel();
        jLPesoSalida = new javax.swing.JLabel();
        jTFPesoEntrada = new javax.swing.JTextField();
        jTFPesoSalida = new javax.swing.JTextField();
        jCBUnidadMedida = new javax.swing.JComboBox<>();
        jLStaticUnidadMedida = new javax.swing.JLabel();
        cabeceraDeVentana = new InterfazGrafica.CabeceraDeVentana();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 255, 153));

        jLStaticEquipamientoDestino.setText("Equipamiento Destino");
        jLStaticEquipamientoDestino.setEnabled(false);
        jLStaticEquipamientoDestino.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jLOperacion.setText("Carga de Movimiento");
        jLOperacion.setEnabled(false);
        jLOperacion.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jLStaticBascula.setText("Bascula Asociada:");
        jLStaticBascula.setEnabled(false);
        jLStaticBascula.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jBConcretarAccion.setText("Aceptar");
        jBConcretarAccion.setEnabled(false);
        jBConcretarAccion.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jBConcretarAccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBConcretarAccionActionPerformed(evt);
            }
        });

        jBCancelar.setText("Cancelar");
        jBCancelar.setEnabled(false);
        jBCancelar.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jBCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCancelarActionPerformed(evt);
            }
        });

        jLabel12.setText("Seleccione una operacion");
        jLabel12.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jCBOperacion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "Insertar un movimiento", "Anular un movimiento" }));
        jCBOperacion.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jCBOperacion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBOperacionItemStateChanged(evt);
            }
        });

        jBBuscarDestino.setText("Buscar un Equipamiento");
        jBBuscarDestino.setEnabled(false);
        jBBuscarDestino.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jBBuscarDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBuscarDestinoActionPerformed(evt);
            }
        });

        JLBascula.setText("Una Bascula");
        JLBascula.setEnabled(false);
        JLBascula.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jLStaticEquipamientoOrigen.setText("Equipamiento Origen");
        jLStaticEquipamientoOrigen.setEnabled(false);
        jLStaticEquipamientoOrigen.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jBBuscarOrigen.setText("Buscar un Equipamiento");
        jBBuscarOrigen.setEnabled(false);
        jBBuscarOrigen.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jBBuscarOrigen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBuscarOrigenActionPerformed(evt);
            }
        });

        jLStaticEquipamientoOrigenSeleccionado.setText("Equipamiento Seleccionado:");
        jLStaticEquipamientoOrigenSeleccionado.setEnabled(false);
        jLStaticEquipamientoOrigenSeleccionado.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jLEquipamientoOrigen.setText("Equipamiento Seleccionado");
        jLEquipamientoOrigen.setEnabled(false);
        jLEquipamientoOrigen.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jLStaticEquipamientoDestinoSeleccionado.setText("Equipamiento Seleccionado:");
        jLStaticEquipamientoDestinoSeleccionado.setEnabled(false);
        jLStaticEquipamientoDestinoSeleccionado.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jLEquipamientoDestino.setText("Equipamiento Seleccionado");
        jLEquipamientoDestino.setEnabled(false);
        jLEquipamientoDestino.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jBBuscar.setText("Buscar un Movimiento");
        jBBuscar.setEnabled(false);
        jBBuscar.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jBBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBuscarActionPerformed(evt);
            }
        });

        jLStaticLoteImplicado.setText("Lote implicado:");
        jLStaticLoteImplicado.setEnabled(false);
        jLStaticLoteImplicado.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        JLLote.setText("Un lote");
        JLLote.setEnabled(false);
        JLLote.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jBBuscarLote.setText("Buscar un Lote");
        jBBuscarLote.setEnabled(false);
        jBBuscarLote.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jBBuscarLote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBuscarLoteActionPerformed(evt);
            }
        });

        timePicker1.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        timePicker2.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jLStaticPatenteAcoplado.setText("Patente de Acoplado");
        jLStaticPatenteAcoplado.setEnabled(false);
        jLStaticPatenteAcoplado.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jTFPatenteAcoplado.setText("Ingrese una patente de Acoplado");
        jTFPatenteAcoplado.setEnabled(false);
        jTFPatenteAcoplado.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jLStaticNombreConductor.setText("Nombre del Conductor");
        jLStaticNombreConductor.setEnabled(false);
        jLStaticNombreConductor.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jLStaticCantidad.setText("Cantidad");
        jLStaticCantidad.setEnabled(false);
        jLStaticCantidad.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jTFNombreConductor1.setText("0");
        jTFNombreConductor1.setEnabled(false);
        jTFNombreConductor1.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jLStaticHoraEntrada.setText("Hora de entrada");
        jLStaticHoraEntrada.setEnabled(false);
        jLStaticHoraEntrada.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jCBTipoEquipamiento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Bolsa" }));
        jCBTipoEquipamiento.setEnabled(false);
        jCBTipoEquipamiento.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jCBTipoEquipamiento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBTipoEquipamientoItemStateChanged(evt);
            }
        });

        jLStaticPatenteChasis.setText("Patente de Chasis");
        jLStaticPatenteChasis.setEnabled(false);
        jLStaticPatenteChasis.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jTFPatenteChasis.setText("Ingrese una patente de chasis");
        jTFPatenteChasis.setEnabled(false);
        jTFPatenteChasis.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jLStaticHoraSalida.setText("Hora de Salida");
        jLStaticHoraSalida.setEnabled(false);
        jLStaticHoraSalida.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jTFNombreConductor.setText("Ingrese un Nombre");
        jTFNombreConductor.setEnabled(false);
        jTFNombreConductor.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jLStaticTipoUnidadTransporte.setText("Tipo de Unidad de Transporte");
        jLStaticTipoUnidadTransporte.setEnabled(false);
        jLStaticTipoUnidadTransporte.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jLStaticFechaOrigen.setText("Fecha de Origen de movimiento");
        jLStaticFechaOrigen.setEnabled(false);
        jLStaticFechaOrigen.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jCFechaOrigenMov.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jCFechaOrigenMov.setEnabled(false);

        jLStaticDetallesTicket.setText("Detalles del Ticket de Movimiento asociado");
        jLStaticDetallesTicket.setEnabled(false);
        jLStaticDetallesTicket.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jLStaticPesoEntrada.setText("Peso de Entrada");
        jLStaticPesoEntrada.setEnabled(false);
        jLStaticPesoEntrada.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jLPesoSalida.setText("Peso de Salida");
        jLPesoSalida.setEnabled(false);
        jLPesoSalida.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jTFPesoEntrada.setText("Peso de entrada");
        jTFPesoEntrada.setEnabled(false);
        jTFPesoEntrada.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jTFPesoSalida.setText("Peso de salida");
        jTFPesoSalida.setEnabled(false);
        jTFPesoSalida.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jCBUnidadMedida.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Kilogramo", "Tonelada" }));
        jCBUnidadMedida.setEnabled(false);
        jCBUnidadMedida.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jLStaticUnidadMedida.setText("Unidad de Medida");
        jLStaticUnidadMedida.setEnabled(false);
        jLStaticUnidadMedida.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLStaticTipoUnidadTransporte)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCBTipoEquipamiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLStaticCantidad)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTFNombreConductor1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLStaticFechaOrigen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCFechaOrigenMov, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLStaticHoraEntrada)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(timePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLStaticHoraSalida)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(timePicker2, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jLStaticPatenteAcoplado)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTFPatenteAcoplado, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jLStaticNombreConductor)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jTFNombreConductor))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jLStaticPatenteChasis)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTFPatenteChasis, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLStaticDetallesTicket)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLStaticUnidadMedida)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCBUnidadMedida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLStaticPesoEntrada)
                            .addComponent(jLPesoSalida))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTFPesoSalida, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTFPesoEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLStaticDetallesTicket)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLStaticTipoUnidadTransporte)
                    .addComponent(jCBTipoEquipamiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLStaticCantidad)
                    .addComponent(jTFNombreConductor1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLStaticFechaOrigen)
                    .addComponent(jCFechaOrigenMov, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLStaticHoraEntrada)
                    .addComponent(timePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(timePicker2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLStaticHoraSalida))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLStaticUnidadMedida)
                    .addComponent(jCBUnidadMedida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLStaticPesoEntrada)
                    .addComponent(jTFPesoEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLPesoSalida)
                    .addComponent(jTFPesoSalida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLStaticNombreConductor)
                    .addComponent(jTFNombreConductor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLStaticPatenteChasis)
                    .addComponent(jTFPatenteChasis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLStaticPatenteAcoplado)
                    .addComponent(jTFPatenteAcoplado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cabeceraDeVentana, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jBConcretarAccion)
                        .addGap(18, 18, 18)
                        .addComponent(jBCancelar))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLStaticEquipamientoDestinoSeleccionado)
                                .addGap(18, 18, 18)
                                .addComponent(jLEquipamientoDestino))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLStaticBascula)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(JLBascula))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLStaticLoteImplicado)
                                .addGap(18, 18, 18)
                                .addComponent(JLLote)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jBBuscarLote))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLStaticEquipamientoOrigen)
                                .addGap(26, 26, 26)
                                .addComponent(jBBuscarOrigen))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLStaticEquipamientoOrigenSeleccionado)
                                .addGap(18, 18, 18)
                                .addComponent(jLEquipamientoOrigen))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLStaticEquipamientoDestino)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jBBuscarDestino))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCBOperacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jBBuscar))
                            .addComponent(jLOperacion))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(cabeceraDeVentana, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(jCBOperacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBBuscar))
                        .addGap(18, 18, 18)
                        .addComponent(jLOperacion)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLStaticEquipamientoOrigen)
                            .addComponent(jBBuscarOrigen))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLStaticEquipamientoOrigenSeleccionado)
                            .addComponent(jLEquipamientoOrigen))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLStaticLoteImplicado)
                            .addComponent(JLLote)
                            .addComponent(jBBuscarLote))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLStaticEquipamientoDestino)
                            .addComponent(jBBuscarDestino))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLStaticEquipamientoDestinoSeleccionado)
                            .addComponent(jLEquipamientoDestino))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLStaticBascula)
                            .addComponent(JLBascula))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBCancelar)
                    .addComponent(jBConcretarAccion))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBConcretarAccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBConcretarAccionActionPerformed
        Bascula unaBasculaAsociada = null;
        switch ((String)jCBOperacion.getSelectedItem()){
            case "Alta":
                break;
        }

        JOptionPane.showMessageDialog(null, "Operacion realizada con exito.");
        limpiarCampos();
    }//GEN-LAST:event_jBConcretarAccionActionPerformed

    private void jBCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCancelarActionPerformed
        this.deshabilitarTodo();
        this.limpiarCampos();
    }//GEN-LAST:event_jBCancelarActionPerformed

    private void jCBTipoEquipamientoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBTipoEquipamientoItemStateChanged
        deshabilitarTodo();
        organizarElementos();
        habilitarParametrosAdicionalesSegunEquipamiento();
    }//GEN-LAST:event_jCBTipoEquipamientoItemStateChanged

    private void jCBOperacionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBOperacionItemStateChanged
        if (!jCBOperacion.getSelectedItem().equals("Seleccionar")){
            this.organizarElementos();
        }
        
    }//GEN-LAST:event_jCBOperacionItemStateChanged

    private void jBBuscarDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBuscarDestinoActionPerformed
        this.ObjetoABuscar = "Equipamiento Destino";
        BuscarEquipamiento unaVentana = new BuscarEquipamiento(this.organizacion, this, this.trayectoriaActual);
        this.dispose();
    }//GEN-LAST:event_jBBuscarDestinoActionPerformed

    private void jBBuscarOrigenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBuscarOrigenActionPerformed
        this.ObjetoABuscar = "Equipamiento Origen";
        BuscarEquipamiento unaVentana = new BuscarEquipamiento(this.organizacion, this, this.trayectoriaActual);
        
        this.dispose();
    }//GEN-LAST:event_jBBuscarOrigenActionPerformed

    private void jBBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBuscarActionPerformed
        
    }//GEN-LAST:event_jBBuscarActionPerformed

    private void jBBuscarLoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBuscarLoteActionPerformed
        this.ObjetoABuscar = "Lote implicado";
    }//GEN-LAST:event_jBBuscarLoteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestionMovimientos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestionMovimientos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestionMovimientos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(GestionMovimientos.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GestionMovimientos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel JLBascula;
    private javax.swing.JLabel JLLote;
    private InterfazGrafica.CabeceraDeVentana cabeceraDeVentana;
    private javax.swing.JButton jBBuscar;
    private javax.swing.JButton jBBuscarDestino;
    private javax.swing.JButton jBBuscarLote;
    private javax.swing.JButton jBBuscarOrigen;
    private javax.swing.JButton jBCancelar;
    private javax.swing.JButton jBConcretarAccion;
    private javax.swing.JComboBox<String> jCBOperacion;
    private javax.swing.JComboBox<String> jCBTipoEquipamiento;
    private javax.swing.JComboBox<String> jCBUnidadMedida;
    private com.toedter.calendar.JDateChooser jCFechaOrigenMov;
    private javax.swing.JLabel jLEquipamientoDestino;
    private javax.swing.JLabel jLEquipamientoOrigen;
    private javax.swing.JLabel jLOperacion;
    private javax.swing.JLabel jLPesoSalida;
    private javax.swing.JLabel jLStaticBascula;
    private javax.swing.JLabel jLStaticCantidad;
    private javax.swing.JLabel jLStaticDetallesTicket;
    private javax.swing.JLabel jLStaticEquipamientoDestino;
    private javax.swing.JLabel jLStaticEquipamientoDestinoSeleccionado;
    private javax.swing.JLabel jLStaticEquipamientoOrigen;
    private javax.swing.JLabel jLStaticEquipamientoOrigenSeleccionado;
    private javax.swing.JLabel jLStaticFechaOrigen;
    private javax.swing.JLabel jLStaticHoraEntrada;
    private javax.swing.JLabel jLStaticHoraSalida;
    private javax.swing.JLabel jLStaticLoteImplicado;
    private javax.swing.JLabel jLStaticNombreConductor;
    private javax.swing.JLabel jLStaticPatenteAcoplado;
    private javax.swing.JLabel jLStaticPatenteChasis;
    private javax.swing.JLabel jLStaticPesoEntrada;
    private javax.swing.JLabel jLStaticTipoUnidadTransporte;
    private javax.swing.JLabel jLStaticUnidadMedida;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTFNombreConductor;
    private javax.swing.JTextField jTFNombreConductor1;
    private javax.swing.JTextField jTFPatenteAcoplado;
    private javax.swing.JTextField jTFPatenteChasis;
    private javax.swing.JTextField jTFPesoEntrada;
    private javax.swing.JTextField jTFPesoSalida;
    private com.github.lgooddatepicker.components.TimePicker timePicker1;
    private com.github.lgooddatepicker.components.TimePicker timePicker2;
    // End of variables declaration//GEN-END:variables

    private void deshabilitarTodo(){
        this.jLabel12.setEnabled(false);
        jCBOperacion.setEnabled(false);
        jBBuscar.setVisible(false);
        jBBuscar.setEnabled(false);
        jLOperacion.setEnabled(false);
        jLStaticEquipamientoOrigen.setEnabled(false);
        jBBuscarOrigen.setEnabled(false);
        jLStaticEquipamientoOrigenSeleccionado.setEnabled(false);
        jLEquipamientoOrigen.setEnabled(false);
        jLStaticEquipamientoDestino.setEnabled(false);
        jBBuscarDestino.setEnabled(false);
        jLStaticEquipamientoDestinoSeleccionado.setEnabled(false);
        jLEquipamientoDestino.setEnabled(false);
        jLStaticBascula.setEnabled(false);
        JLBascula.setEnabled(false);
        jLStaticLoteImplicado.setEnabled(false);
        JLLote.setEnabled(false);
        jBBuscarLote.setEnabled(false);
        
        
        jLStaticDetallesTicket.setEnabled(false);
        jLStaticTipoUnidadTransporte.setEnabled(false);
        jCBTipoEquipamiento.setEnabled(false);
        jLStaticCantidad.setEnabled(false);
        jTFNombreConductor1.setEnabled(false);
        jLStaticFechaOrigen.setEnabled(false);
        jCFechaOrigenMov.setEnabled(false);
        jLStaticHoraEntrada.setEnabled(false);
        timePicker1.setEnabled(false);
        jLStaticHoraSalida.setEnabled(false);
        timePicker2.setEnabled(false);
        jLStaticUnidadMedida.setEnabled(false);
        jCBUnidadMedida.setEnabled(false);
        jLStaticPesoEntrada.setEnabled(false);
        jTFPesoEntrada.setEnabled(false);
        jLPesoSalida.setEnabled(false);
        jTFPesoSalida.setEnabled(false);
        jLStaticNombreConductor.setEnabled(false);
        jTFNombreConductor.setEnabled(false);
        jLStaticPatenteChasis.setEnabled(false);
        jTFPatenteChasis.setEnabled(false);
        jLStaticPatenteAcoplado.setEnabled(false);
        jTFPatenteAcoplado.setEnabled(false);
        
        

        jBConcretarAccion.setEnabled(false);
        jBCancelar.setEnabled(false);
        
    }
    
    private void limpiarCampos() {
                jLOperacion.setText("Operacion:");
                
                jLEquipamientoOrigen.setText("");
                jLEquipamientoDestino.setText("");
                JLBascula.setText("");
                jCFechaOrigenMov.setCalendar(Calendar.getInstance());
                timePicker1.setTimeToNow();
                timePicker2.setTimeToNow();
                jTFPesoEntrada.setText("");
                jTFPesoEntrada.setText("");
                jTFNombreConductor.setText("");
                jTFPatenteChasis.setText("");
                jTFPatenteAcoplado.setText("");
                
                jBConcretarAccion.setEnabled(false);
                jBCancelar.setEnabled(false);

                jCBOperacion.setSelectedItem("Seleccionar");

                this.jCBOperacion.setEnabled(true);
                this.unEquipamientoOrigenSeleccionado = null;
                this.unEquipamientoDestinoSeleccionado = null;
                this.unLoteSeleccionado = null;
    }

    @Override
    public void actualizarUnObjeto(Object UnObjeto) {
        switch (this.ObjetoABuscar){
            case "Equipamiento Origen":
                Equipamiento unEquipamientoOrigen = (Equipamiento) UnObjeto;
                setUnEquipamientoOrigenSeleccionado(unEquipamientoOrigen);
                //Habilitar la etiqueta que muestra el equipamiento origen seleccionado y exhibir el equipamiento.
                jLStaticEquipamientoOrigenSeleccionado.setEnabled(true);
                jLEquipamientoOrigen.setEnabled(true);
                jLEquipamientoOrigen.setText(unEquipamientoOrigen.getNombre());
                //Habilitar opciones de elección de lotes.
                jLStaticLoteImplicado.setEnabled(true);
                JLLote.setEnabled(true);
                jBBuscarLote.setEnabled(true);
                break;
            case "Lote implicado":
                Lote unLote = (Lote) UnObjeto;
                setUnLoteSeleccionado(unLote);
                //Habilitar la etiqueta que muestra el lote seleccionado y exhibir el lote.
                jLStaticLoteImplicado.setEnabled(true);
                JLLote.setEnabled(true);
                jBBuscarLote.setEnabled(true);
                JLLote.setText(unLote.getEtiqueta());
                
                //Habilitar el resto de los campos
                jLStaticEquipamientoDestino.setEnabled(true);
                jBBuscarDestino.setEnabled(true);
                
                break;
            case "Equipamiento Destino":
                Equipamiento unEquipamientoDestino = (Equipamiento) UnObjeto;
                setUnEquipamientoOrigenSeleccionado(unEquipamientoDestino);
                //Habilitar la etiqueta que muestra el Equipamiento destino seleccionado y exhibir el Equipamiento.
                jLStaticEquipamientoDestinoSeleccionado.setEnabled(true);
                jLEquipamientoDestino.setEnabled(true);
                jLEquipamientoDestino.setText(unEquipamientoDestino.getNombre());
                jLStaticBascula.setEnabled(true);
                JLBascula.setEnabled(true);
                habilitarDetallesDeTicket();
                
                jBConcretarAccion.setEnabled(true);
                break;
        }
        this.pack();
    }

    private void prepararAlta() {
        
        jBConcretarAccion.setText("Registrar movimiento");
        jLOperacion.setText("Registro de Movimiento");
        
        
        jLOperacion.setEnabled(true);
        jLStaticEquipamientoOrigen.setEnabled(true);
        jBBuscarOrigen.setEnabled(true);
        
        //Cuando se modifica un equipamiento de origen se debe habilitar el botón de eleccion de lotes.
        jLStaticEquipamientoOrigenSeleccionado.setEnabled(false);
        jLEquipamientoOrigen.setEnabled(false);
        jLStaticEquipamientoDestino.setEnabled(false);
        jBBuscarDestino.setEnabled(false);
        jLStaticEquipamientoDestinoSeleccionado.setEnabled(false);
        jLEquipamientoDestino.setEnabled(false);
        jLStaticBascula.setEnabled(false);
        JLBascula.setEnabled(false);
        jLStaticLoteImplicado.setEnabled(false);
        JLLote.setEnabled(false);
        jBBuscarLote.setEnabled(false);
        
        
        jLStaticDetallesTicket.setEnabled(false);
        jLStaticTipoUnidadTransporte.setEnabled(false);
        jCBTipoEquipamiento.setEnabled(false);
        jLStaticCantidad.setEnabled(false);
        jTFNombreConductor1.setEnabled(false);
        jLStaticFechaOrigen.setEnabled(false);
        jCFechaOrigenMov.setEnabled(false);
        jLStaticHoraEntrada.setEnabled(false);
        timePicker1.setEnabled(false);
        jLStaticHoraSalida.setEnabled(false);
        timePicker2.setEnabled(false);
        jLStaticUnidadMedida.setEnabled(false);
        jCBUnidadMedida.setEnabled(false);
        jLStaticPesoEntrada.setEnabled(false);
        jTFPesoEntrada.setEnabled(false);
        jLPesoSalida.setEnabled(false);
        jTFPesoSalida.setEnabled(false);
        jLStaticNombreConductor.setEnabled(false);
        jTFNombreConductor.setEnabled(false);
        jLStaticPatenteChasis.setEnabled(false);
        jTFPatenteChasis.setEnabled(false);
        jLStaticPatenteAcoplado.setEnabled(false);
        jTFPatenteAcoplado.setEnabled(false);
        
        

        jBConcretarAccion.setEnabled(true);
        jBCancelar.setEnabled(true);
        
    }
    private void habilitarParametrosAdicionalesSegunEquipamiento(){
        
        
    }
    private void visibilizarParametrosAdicionalesSegunEquipamiento(){
                      
    }
    
    private void prepararBaja() {
        jBBuscar.setVisible(true);
        jBBuscar.setEnabled(true);
        jBCancelar.setEnabled(true);
    }

    private void prepararModificacion() {

    }



    public void setUnEquipamientoOrigenSeleccionado(Equipamiento unEquipamientoOrigenSeleccionado) {
        this.unEquipamientoOrigenSeleccionado = unEquipamientoOrigenSeleccionado;
    }

    public void setUnLoteSeleccionado(Lote unLoteSeleccionado) {
        this.unLoteSeleccionado = unLoteSeleccionado;
    }

    public void setUnEquipamientoDestinoSeleccionado(Equipamiento unEquipamientoDestinoSeleccionado) {
        this.unEquipamientoDestinoSeleccionado = unEquipamientoDestinoSeleccionado;
    }

    private void habilitarDetallesDeTicket() {
        jLStaticDetallesTicket.setEnabled(true);
        jLStaticTipoUnidadTransporte.setEnabled(true);
        jCBTipoEquipamiento.setEnabled(true);
        jLStaticCantidad.setEnabled(true);
        jTFNombreConductor1.setEnabled(true);
        jLStaticFechaOrigen.setEnabled(true);
        jCFechaOrigenMov.setEnabled(true);
        jLStaticHoraEntrada.setEnabled(true);
        timePicker1.setEnabled(true);
        jLStaticHoraSalida.setEnabled(true);
        timePicker2.setEnabled(true);
        jLStaticUnidadMedida.setEnabled(true);
        jCBUnidadMedida.setEnabled(true);
        jLStaticPesoEntrada.setEnabled(true);
        jTFPesoEntrada.setEnabled(true);
        jLPesoSalida.setEnabled(true);
        jTFPesoSalida.setEnabled(true);
        jLStaticNombreConductor.setEnabled(true);
        jTFNombreConductor.setEnabled(true);
        jLStaticPatenteChasis.setEnabled(true);
        jTFPatenteChasis.setEnabled(true);
        jLStaticPatenteAcoplado.setEnabled(true);
        jTFPatenteAcoplado.setEnabled(true);
    }
    
}
